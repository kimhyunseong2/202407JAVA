7월19일 코드참조
정보
CRUD
Create:insert
Read
Update
Delete

create table 테이블 이름(... ) : 테이블 생성
insert into 테이블 이름 values(... ) : 테이블 안에 요소 삽입
drop table 테이블 이름 : 테이블 삭제
-----------------------------------------------------------
7월22일
create database 데이터베이스이름; -데이터베이스 생성 명령어
-----------------------------------------------------------
7월24일
update 테이블명 set 칼럼명 - 테이블에 칼럼값을 변경할때 사용하는 명령어
-----------------------------------------------------------
8월6일
oracle
관계형 데이터 모델
-개체(entiy) = 테이블
-속성(attribute) = 컬럼
-관계(relationship)

SQL(Structured Query Language): RDBMS에서 데이터를 다루고 관리하는데 사용하는 데이터베이스 질의 언어
종류(oracle책 p26참고)
-DQL
-DML
-DDL
-TCL
-DCL

관계형 데이터베이스의 구성요소(p29~37 참고)
테이블
가로줄을 행(row) 세로줄을 열(column)

기본키(PK: Primary Key) = unique + not null
외래키(FK: Foreign Key) = 다른 테이블의 기본키 

데이터베이스에 저장하는 데이터는 다양한 형태를 가지고 있다
자료형(p39에 표 참고)

테이블 구성 살펴보는 명령어
DESC 테이블이름;

셀렉션(selection): 행 단위로 원하는 데이터를 조회하는 방식
프로젝션(projection): 열 단위로 원하는 데이터를 조회하는 방식

조인(join): 두 개 이상의 테이블을 양옆에 연결하여 마치 하나의 테이블인 것처럼 데이터를 조회하는 방식

DISTINCT: 중복 데이터를 삭제할때 사용

ORDER BY: 원하는 순서로 출력 데이터를 정렬할때 사용
오름차순 정렬 ASC | 내림차순 정렬 DESC

WHERE절: 필요한 데이터만 출력할때 사용

여러 개 조건식을 사용하는 AND, OR 연산자(p97, p99 표 참고)
AND는 둘다 ture이면 ture 하나라도 false면 false
OR는 하나라도 ture면 ture 

등가 비교 연산자(p104 표 참고)

논리 부정 연산자(NOT)

IN 연산자(p106,107 참고)

BETWEEN A AND B 연산자(p109 참고)

LIKE 연산자와 와일드 카드(p110 참고)

IS NULL 연산자(p114 참고)

집합 연산자(UNION)(p119 참고)
-------------------------------------------------------------------------------------------------------
8월7일
set PAGESIZE 0: 세팅
coalesce(comm,o): null 처리함수 

무작위로 레코드를 반환하는거
oracle에서 rownum 
mysql에서 limit

숫자를 #으로 바꿈: select translate(data, '0123456789','##########') 
    		from V

숫자를 공백으로 바꿈: select replace(translate(data, '0123456789','##########'), '#', '') 
    		from V

숫자만 나옴: select replace(data, replace(translate(data, '0123456789','##########'), '#', ''),'') 
    		from V

뷰에서 정렬: select *
    	from V
    	order by replace(data, replace(translate(data, '0123456789','##########'), '#', ''),'') 

null을 먼저나오거나 나중에나오는거
nulls first
nulls last

oracle책 p125 문제
1. select *
   from emp 
   where ename like '%S';

2. select empno,ename,job,sal,deptno
    from emp
    where deptno = 30 and job = 'SALESMAN';

3. 1) select empno, ename, job, sal, deptno
    from emp
    where deptno in(20,30)
    and sal > 2000;
  
   2) select empno, ename, job, sal, deptno
         from emp
         where deptno = 20
         and sal > 2000
       union
       select empno, ename, job, sal, deptno
         from emp
         where deptno = 30
         and sal > 2000;

4. select *
    from emp
    where sal < 2000
         or sal > 3000;

5. select ename, empno, sal, deptno
    from emp
    where deptno = 30
    and ename like '%E%'
    and sal not between 1000 and 2000;

6. select *
    from emp
    where comm is null
    and mgr is not null
    and job in('MANAGER', 'CLERK')
    and ename not like '_L%';

오라클 함수의 종류
-내장 함수: 함수를 제작한 주체를 기준으로 오라클에서 기본으로 제공하는 함수
-사용자 정의 함수: 사용자가 필요해 의해 직접 정의한 함수

내장 함수의 종류
-단일행 함수(single-row function): 데이터가 한 행씩 입력되고 입력된 한 행당 결과가 하나씩 나오는 함수
-다중행 함수(multiple-row function): 여러 행이 입력되어 하나의 행으로 결과가 반환되는 함수

대,소문자를 바꿔주는 함수(p130 참고)
-UPPER(문자열): 괄호 안 문자 데이터를 모두 대문자로 변환하여 반환
-LOWER(문자열): 괄호 안 문자 데이터를 모두 소문자로 변환하여 반환
-INTCAP(문자열): 괄호 안 문자 데이터 중 첫 글자는 대문자로, 나머지 문자를 소문자로 변환 후 반환

문자열 길이를 구하는 함수(p132 참고)
-LENGTH

문자열 일부를 추출하는 함수(p134 참고)
-SUBSTR(문자열 데이터, 시작 위치, 추출 길이): 문자열 데이터의 시작 위치부터 추출 길이만큼 추출한다 시작 위치가
음수일 경우에는 마지막 위치부터 거슬러 올라간 위치에서 시작한다
-SUBSTR(문자열 데이터, 시작 위치): 문자열 데이터의 시작 위치부터 문자열 데이터 끝까지 추출한다 시작 위치가
음수일 경우에는 마지막 위치부터 거슬러 올라간 위치에서 끝까지 추출한다

문자열 데이터 안에서 특정 문자 위치를 찾는 함수(p137 참고)
-INSTR([대상문자열 데이터(필수)],
             [위치를 찾으려는 부분 문자(필수)],
             [위치 찾기를 시작할 대상 문자열 데이터 위치(선택, 기본값은 1)],
             [시작 위치에서 찾으려는 문자가 몇 번째인지 지정(선택, 기본값은 1)])

특정 문자를 다른 문자로 바꾸는 함수(p139 참고)
-REPLACE([문자열 데이터 또는 열이름(필수)], [찾는 문자(필수)], [대체할 문자(선택)])

데이터의 빈 공간을 특정 문자로 채우는 함수(p140 참고)
-LPAD([문자열 데이터 또는 열이름(필수)], [데이터의 자릿수(필수)], [빈 공간에 채울 문자(선택)])
-RPAD([문자열 데이터 또는 열이름(필수)], [데이터의 자릿수(필수)], [빈 공간에 채울 문자(선택)])

두 문자열 데이터를 합치는 함수(p141 참고)
-CONCAT

특정 문자를 지우는 함수(p142 참고)
-TRIM([삭제 옵션(선택)] [삭제할 문자(선택)] from [원본 문자열 데이터(필수)])
-LTRIM([원본 문자열 데이터(필수)], [삭제할 문자 집합(선택)]): 원본 문자열의 왼쪽에서 삭제할 문자열을 지정한다
-RTRIM([원본 문자열 데이터(필수)], [삭제할 문자 집합(선택)]): 원본 문자열의 오른쪽에서 삭제할 문자열을 지정한다

숫자데이터를 연산하고 수치를 조정하는 숫자 함수(p146 참고)
-ROUND([숫자(필수)], [반올림 위치(선택)]: 특정 위치에서 반올림하는 함수
-TRUNC([숫자(필수)], [버림 위치(선택)]: 특정 위치에서 버리는 함수
-CEIL([숫자(필수)]): 입력된 숫자와 가까운 큰정수를 반환하는 함수
-FLOOR([숫자(필수)]): 입력된 숫자와 가까운 작은정수를 반환하는 함수
-MOD([나눗셈 될 숫자(필수)], [나눌 숫자(필수)]): 숫자를 나눈 나머지 값을 구하는 함수

날짜 데이터를 다루는 날짜 함수(p150 참고)
-ADD_MONTHS([날짜 데이터(필수)], [더할 개월 수(정수)(필수)]): 특정 날짜 데이터에 입력한 개월 수만큼의 이후 날짜를 출력해 주는 함수
-MONTHS_BETWEEN([날짜 데이터1(필수)], [날짜 데이터2(필수)]): 두 날짜 데이터 간의 날짜 차이를 개월 수로 계산하여 출력해 주는 함수
-NEXT_DAY([날짜 데이터(필수)], [요일 문자(필수)]): 특정 날짜를 기준으로 돌아오는 요일의 날짜를 출력해 주는 함수
-LAST_DAY([날짜 데이터(필수)]): 특정 날짜가 속한 달의 마지막 날짜를 출력해 주는 함수

자료형을 변환하는 형 변환 함수(p157 참고)
-TO_CHAR([날짜 데이터(필수)], '[출력되길 원하는 문자 형태(필수)]'): 날짜 데이터를 원하는 형태의 문자열로 출력해 주는 함수
-TO_NUMBER([문자열 데이터(필수)], '[인식될 숫자형태(필수)]'): 문자열을 지정한 형태의 숫자로 인식하여 숫자 데이터로 변환해 주는 함수
-TO_DATE('[문자열 데이터(필수)]', '[인식될 날짜형태(필수)]'): 문자열 데이터를 날짜형의 데이터로 변환해 주는 함수

NULL 처리 함수(p167 참고)
-NVL([NULL인지 여부를 검사할 데이터 또는 열(필수)],
          [앞의 데이터가 NULL일 경우 반환할 데이터](필수)): 열 또는 데이터를 입력하여 해당 데이터가 NULL이 아닐 경우 데이터를 그대로 반환하고,
					    NULL인 경우 지정한 데이터를 반환해 주는 함수
-NVL2([NULL인지 여부를 검사할 데이터 또는 열(필수)],
            [앞의 데이터가 NULL이 아닐 경우 반환할 데이터 또는 계산식(필수)],
            [앞의 데이터가 NULL일 경우 반환할 데이터 또는 계산식(필수)]):열 또는 데이터를 입력하여 해당 데이터가 NULL이 아닐 때와 NULL일 때 
                                       				     출력 데이터를 각각 지정해 주는 함수
-----------------------------------------------------------------------------------------------------------------
8월8일
sum(sal) over (order by sal): 누적 합계
median(): 중앙값

oracle책 p174 문제
1. select empno, rpad(substr(empno,1,2),4,'#') MASKING_EMPNO, 
        ename, rpad(substr(ename,1,1),5,'*') MASKING_ENAME
    from emp
    where length(ename) >= 5
    and length(ename) < 6

2. select empno, ename, sal, trunc(sal/21.5,2) DAY_PAY, round(sal/21.5/8, 1) TIME_DAY
    from emp

3. select empno, ename, to_char(hiredate, 'YYYY/MM/DD'), 
        to_char(next_day(add_months(hiredate, 3),'월'), 'YYYY-MM-DD')R_JOB, nvl(to_char(comm), 'N/A') COMM
    from emp

4. select empno, ename, mgr, 
        case when mgr is null then '0000'
             when substr(mgr, 1, 2) = '75' then '5555'
             when substr(mgr, 1, 2) = '76' then '6666'
             when substr(mgr, 1, 2) = '77' then '7777'
             when substr(mgr, 1, 2) = '78' then '8888'
        else to_char(mgr)
        end chg_mgr
    from emp

oracle책 p212 문제
1. select deptno, trunc(avg(sal),0)avg_sal, max(sal)max_sal, min(sal)min_sal, count(*)cnt
    from emp
    group by deptno

2. select job, count(*)
    from emp
    group by job
    having count(*) >= 3

3. select to_char(hiredate,'YYYY')hire_year, deptno, count(*)cnt
    from emp
    group by to_char(hiredate,'YYYY'), deptno

4. select nvl2(comm,'O', 'X') as EXIST_COMM,
       count(*) as cnt
    from emp
    group by nvl2(comm,'O', 'X')

5. select deptno,
       to_char(hiredate, 'YYYY')HIRE_YEAR,
       count(*)cnt,
       max(sal)max_sal,
       sum(sal)sum_sal,
       avg(sal)avg_sal
    from emp
    group by rollup(deptno, to_char(hiredate, 'YYYY'))

합계를 구하는 함수(p178 참고)
-SUM([DISTINCT, ALL 중 하나를 선택하거나 아무값도 지정하지 않음(선택)]
          [합계를 구할 열이나 연산자, 함수를 사용한 데이터(필수)])

데이터 개수를 구해주는 함수(p180 참고)
-COUNT([DISTINCT, ALL 중 하나를 선택하거나 아무값도 지정하지 않음(선택)]
               [개수를 구할 열이나 연산자, 함수를 사용한 데이터(필수)])

최댓값을 구하는 함수(p182 참고)
-MAX([DISTINCT, ALL 중 하나를 선택하거나 아무값도 지정하지 않음(선택)]
           [최댓값을 구할 열이나 연산자, 함수를 사용한 데이터(필수)])

최솟값을 구하는 함수(p182 참고)
-MIN([DISTINCT, ALL 중 하나를 선택하거나 아무값도 지정하지 않음(선택)]
           [최솟값을 구할 열이나 연산자, 함수를 사용한 데이터(필수)])

평균값을 구하는 함수(p184 참고)
-AVG([DISTINCT, ALL 중 하나를 선택하거나 아무값도 지정하지 않음(선택)]
           [평균값을 구할 열이나 연산자, 함수를 사용한 데이터(필수)])

결과 값을 원하는 열로 묶어 출력하는 GROUP BY절(p186 참고)
SELECT      [조회할 열1 이름], [열2 이름], ..., [열N 이름]
FROM        [조회할 테이블 이름]
WHERE      [조회할 행을 선별하는 조건식]
GROUP BY [그룹화할 열을 지정(여러 개 지정 가능)]
ORDER BY [정렬하는 열 지정]

GROUP BY절을 사용할 때 유의점(p188 참고)
-다중행 함수를 사용하지 않은 일반 열은 GROUP BY절에 명시하지 않으면 SELECT절에서 사용할 수 없다는 것

GROUP BY절에 조건을 줄 때 사용하는 HAVING절(p190 참고)
SELECT      [조회할 열1 이름], [열2 이름], ..., [열N 이름]
FROM        [조회할 테이블 이름]
WHERE      [조회할 행을 선별하는 조건식]
GROUP BY [그룹화할 열을 지정(여러 개 지정 가능)]
HAVING     [출력 그룹을 제한하는 조건식]
ORDER BY [정렬하는 열 지정]

HAVING절을 사용할 때 유의점(p191 참고)
-조건식을 지정한다는 점에서 HAVING절이 WHERE절과 비슷하다고 생각할 수 있다
하지만 WHERE절은 출력 대상 행을 제한하고, HAVING절은 그룹화된 대상을 출력에서 제한하므로 쓰임새는 전혀 다르다는 것

그룹화와 관련된 여러 함수(p195 참고)
-ROLLUP
SELECT      [조회할 열1 이름], [열2 이름], ..., [열N 이름]
FROM        [조회할 테이블 이름]
WHERE      [조회할 행을 선별하는 조건식]
GROUP BY ROLLUP [그룹화할 열을 지정(여러 개 지정 가능)]

-CUBE
SELECT      [조회할 열1 이름], [열2 이름], ..., [열N 이름]
FROM        [조회할 테이블 이름]
WHERE      [조회할 행을 선별하는 조건식]
GROUP BY CUBE [그룹화할 열을 지정(여러 개 지정 가능)]

-GROUPING SETS
-GROUPING_ID
-LISTAGG
-PIVOT
-UNPIVOT
-----------------------------------------------------------------------------------------------------------------
8월9일
조인(join): 두 개 이상의 테이블 연결하여 하나의 테이블처럼 출력할 때 사용하는 방식(p215 참고)

조인 종류(p221 참고)
-등가조인(equi join): 테이블을 연결한 후에 출력 행을 각 테이블의 특정 열에 일치한 데이터를 기준으로 선정하는 방식
등가 조인은 내부 조인(inner join) 또는 단순 조인(simple join)으로 부르기도 한다

-비등가 조인(non-equi join): 등가 조인 방식 외의 방식(p224 참고)

-자체 조인(p225 참고)

-외부 조인(outer join)(p228참조)
왼쪽 외부 조인(Left Outer Join): where table1.col1 = table2.col1(+)
오른쪽 외부 조인(Right Outer Join): where table1.col1(+) = table2.col1

-NATURAL JOIN: 등가 조인을 대신해 사용할 수 있는 조인 방식으로 조인 대상이 되는 두 테이블에 이름과
자료형이 같은 열을 찾은 후 그 열을 기준으로 등가 조인을 해 주는 방식(p232 참고)

-JOIN ~ USING: 기존 등가 조인을 대신하는 조인 방식 NATURAL JOIN이 자동으로 조인 기준 열을 지정하는 것과 달리
USING 키워드에 조인 기준으로 사용할 열을 명시하여 사용한다(p233 참고)
from table1 join table2 using(조인에 사용한 기준열)

-JOIN ~ ON: 기존 WHERE절에 있는 조인 조건식을 ON 키워드 옆에 작성한다 조인 기준 조건식은 ON에 명시하고
그 밖의 출력행을 걸러 내기 위해 WHERE 조건식을 따로 사용하는 방식(p234 참고)
from table1 join table2 on (조인 조건식)

SQL-99 조인 방식에서 세 개 이상의 테이블을 조인할 때(p237 참고)
from table1, table2, table3
where table1.col = table2.col
and table2.col = table3.col

from table1 join table2 on (조건식)
join table3 on (조건식)

서브쿼리(subquery): SQL문을 실행하는 데 필요한 데이터를 추가로 조회하기 위해 SQL문 내부에서 사용하는 select문
서브쿼리의 결과 값을 사용하여 기능을 수행하는 영역은 메인쿼리(main query)라고 부른다(p242 참고)
select 조회할 열
    from  조회할 테이블
    where 조건식 ( select 조회할 열
                            from 조회할 테이블
                            where 조건식)

실행 결과가 하나인 단일행 서브쿼리(p246 참고)
단일행 서브쿼리(single-row subquery): 실행 결과가 단 하나의 행으로 나오는 서브쿼리
서브쿼리에서 출력되는 결과가 하나이므로 메인쿼리와 서브쿼리 결과는 다음과 같이 단일행 연사자를 사용하여 비교한다

실행 결과가 여러 개인 다중행 서브쿼리(p249 참고)
다중행 서브쿼리(multiple-row subquery): 실행 결과 행이 여러 개로 나오는 서브쿼리 단일행 연산자는 사용할 수 없고 다중행 연사자를 사용해야 
메인쿼리와 비교할 수 있다

다중행 연산자
IN: 메인쿼리의 데이터가 서브쿼리의 결과 중 하나라도 일치한 데이터가 있다면 true
ANY, SOME: 메인쿼리의 조건식을 만족하는 서브쿼리의 결과가 하나 이상이면 true
ALL: 메인쿼리의 조건식을 서브쿼리의 결과 모두가 만족하면 true
EXISTS: 서브쿼리의 결과가 존재하면(즉, 행이 1개 이상일 경우)true

비교할 열이 여러 개인 다중열 서브쿼리(p258 참고)
다중열 서브쿼리(multiple-column subquery): 서브쿼리의 select절에 비교할 데이터를 여러 개 지정하는 방식
메인쿼리에 비교할 열을 괄호로 묶어 명시하고 서브쿼리에서는 괄호로 묶은 데이터와 같은 자료형 데이터를 select절에 명시하여 사용할 수 있다

FROM절에 사용하는 서브쿼리와 WITH절(p259 참고)
from절에 사용하는 서브쿼리는 인라인 뷰(inline view)라고 한다
인라인 뷰: 특정 테이블 전체 데이터가 아닌 select문을 통해 일부 데이터를 먼저 추출해 온 후 별칭을 주어 사용할 수 있다

with
[별칭1] as (select문 1),
[별칭2] as (select문 2),
...
[별칭n] as (select문 n)
select
   from 별칭1, 별칭2, 별칭3
...

select 절에 사용하는 서브쿼리
-스칼라 서브쿼리(scalar subquery)



--총계에서의 백분율 알아내기
select distinct (d10/total)*100 as pct
    from (
select deptno,
        sum(sal)over() total,
        sum(sal)over(partition by deptno) d10
    from emp
        ) x
    where deptno=10

--최댓값과 최솟값을 배제한 평균 계산하기
select avg(sal)
    from (
select sal, min(sal)over() min_sal, max(sal)over() max_sal
    from emp
        ) x
    where sal not in (min_sal, max_sal)

--결과셋을 페이지로 매기기
select sal
    from (
select row_number() over(order by sal) as rn,
        sal
    from emp
        ) x
    where rn between 1 and 5

--수평 히스토그램 생성하기
select deptno,
        lpad('*',count(*),'*') as cnt
    from emp
    group by deptno

--단순 소계 계산하기
select case grouping(job)
            when 0 then job
            else 'TOTAL'
        end job,
        sum(sal) sal
    from emp
    group by rollup(job)

--가능한 모든 식 조합의 소계 계산하기
select grouping(job),grouping(deptno),deptno,
        job,
        case grouping(deptno)||grouping(job)
             when '00' then 'TOTAL BY DEPT AND JOB'
             when '10' then 'TOTAL BY JOB'
             when '01' then 'TOTAL BY DEPT'
             when '11' then 'GRAND TOTAL FOR TABLE'
        end category,
        sum(sal) sal
    from emp
    group by cube(deptno,job)
    order by grouping(job),grouping(deptno)

--상위-하위 관계1
select ename
    from emp
    start with ename = 'MILLER'
    connect by prior mgr = empno

--상위-하위 관계2
select sys_connect_by_path(ename,'-->') tree
    from emp
    start with ename = 'MILLER'
    connect by prior mgr = empno

--상위-하위 관계3
select ltrim(
        sys_connect_by_path(ename,' - '),
        ' - ') emp_tree
    from emp
    start with mgr is null
    connect by prior empno = mgr
    order by 1

--상위-하위 관계4
select ltrim(
        sys_connect_by_path(ename,'-->'),
        '-->') leaf__branch__root
    from emp
    where level =3
    start with ename = 'MILLER'
    connect by prior mgr = empno

--상위-하위 관계5
select lpad('.',2*level,'.')||ename emp_tree
    from emp
    start with mgr is null
    connect by prior empno = mgr

oracle책 p239 문제
1. (1) select d.deptno, d.dname, e.empno, e.ename, e.sal
    from emp e, dept d
    where e.deptno = d.deptno
    and sal > 2000
    order by d.deptno,e.empno

   (2)select d.deptno, d.dname, e.empno, e.ename, e.sal
    from emp e join dept d on (e.deptno = d.deptno)
    where sal > 2000
    order by d.deptno,e.empno

2. (1) select d.deptno, d.dname, trunc(avg(sal)) as avg_sal,
       max(sal) as max_sal,
       min(sal) as min_sal,
       count(*) as cnt
    from emp e, dept d
    where e.deptno = d.deptno
    group by d.deptno, d.dname

   (2) select deptno, d.dname, trunc(avg(sal)) as avg_sal,
       max(sal) as max_sal,
       min(sal) as min_sal,
       count(*) as cnt
    from emp e join dept d using(deptno)
    group by deptno, d.dname

3. (1) select d.deptno, d.dname, e.empno, e.ename, e.job, e.sal
    from emp e, dept d
    where e.deptno(+) = d.deptno
    order by d.deptno, e.ename

   (2) select d.deptno, d.dname, e.empno, e.ename, e.job, e.sal
    from emp e right outer join dept d on (e.deptno = d.deptno)
    order by d.deptno, e.ename

4. (1) select d.deptno, d.dname, 
       e.empno, e.ename, e.mgr, e.sal, e.deptno,
       s.losal, s.hisal, s.grade,
       e2.empno as mgr_empno, e2.ename as mgr_ename
    from emp e, dept d, salgrade s, emp e2
    where e.deptno(+) = d.deptno
    and e.sal between s.losal(+) and s.hisal(+)
    and e.mgr = e2.empno(+)
    order by d.deptno, e.empno

   (2) select d.deptno, d.dname, 
       e.empno, e.ename, e.mgr, e.sal, e.deptno,
       s.losal, s.hisal, s.grade,
       e2.empno as mgr_empno, e2.ename as mgr_ename
    from emp e right outer join dept d on (e.deptno = d.deptno)
                     left outer join salgrade s on (e.sal between s.losal and s.hisal)
                     left outer join emp e2 on (e.mgr = e2.empno)
    order by d.deptno, e.empno

oracle책 p262 문제
1. select e.job, e.empno, e.ename, e.sal, d.deptno, d.dname
    from emp e, dept d
    where e.deptno = d.deptno
    and job = (select job
                from emp
                where ename = 'ALLEN')

2. select e.empno, e.ename, d.dname, e.hiredate, d.loc, e.sal, s.grade
    from emp e, dept d, salgrade s
    where e.deptno = d.deptno
    and e.sal between s.losal and s.hisal
    and sal > (select avg(sal)
                    from emp)
    order by e.sal desc, empno

3. select e.empno, e.ename, e.job, d.deptno, d.dname, d.loc
    from emp e, dept d
    where e.deptno = d.deptno
    and e.deptno = 10
    and job not in(select distinct job 
                from emp 
                where deptno = 30) 

4. select e.empno, e.ename, e.sal, s.grade
    from emp e, salgrade s
    where e.sal between s.losal and s.hisal
    and sal > (select distinct max(sal)
                from emp
                where job = 'SALESMAN')
    order by e.empno
-----------------------------------------------------------------------------------------------------------------
8월12일
oracle책 p287문제
1. insert into chap10hw_dept(deptno, dname, loc) values(50, 'oracle', 'busan');
insert into chap10hw_dept(deptno, dname, loc) values(60, 'sql', 'ilsan');
insert into chap10hw_dept(deptno, dname, loc) values(70, 'select', 'incheon');
insert into chap10hw_dept(deptno, dname, loc) values(80, 'dml', 'bundang');

2. insert into chap10hw_emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) 
values(7201, 'TEST_USER1', 'MANAGER', 7788, '2016-01-02', 4500, null, 50);

insert into chap10hw_emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) 
values(7202, 'TEST_USER2', 'CLERK', 7201, '2016-02-21', 1800, null, 50);

insert into chap10hw_emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) 
values(7203, 'TEST_USER3', 'ANALYST', 7201, '2016-04-11', 3400, null,60);

insert into chap10hw_emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) 
values(7204, 'TEST_USER4', 'SALESMAN', 7201, '2016-05-31', 2700, 300, 60);

insert into chap10hw_emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) 
values(7205, 'TEST_USER5', 'CLERK', 7201, '2016-07-20', 2600, null, 70);

insert into chap10hw_emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) 
values(7206, 'TEST_USER6', 'CLERK', 7201, '2016-09-08', 2600, null, 70);

insert into chap10hw_emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) 
values(7207, 'TEST_USER7', 'LECTURER', 7201, '2016-10-28', 2300, null, 80);

insert into chap10hw_emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) 
values(7208, 'TEST_USER8', 'STUDENT', 7201, '2018-03-09', 1200, null, 80);

3. update CHAP10HW_EMP
    set deptno = 70
    where sal > (select avg(sal)
                    from CHAP10HW_EMP
                    where deptno = 50)

4. update chap10hw_emp
    set sal = sal*1.1,
        deptno = 80
    where hiredate > (select min(hiredate)
                        from chap10hw_emp
                        where deptno = 60)

5. delete from chap10hw_emp
where empno in (select e.empno
                    from chap10hw_emp e, chap10hw_salgrade s
                    where e.sal between s.losal and s.hisal
                    and s.grade = 5)

중복된레코드 삭제
delete from dupes
where id not in(
select min(id)
    from dupes
    group by name)

UPDATE문을 실행하기 전에 UPDATE문의 WHERE절을 검증하는 작업이 반드시 필요하다

하나의 단위로 데이터를 처리하는 트랜잭션(p291 참고)
-트랜잭션(transaction): 더 이상 분활할 수 없는 최소 수행 단위를 뜻하며 계좌 이체와 같이 하나의 작업
또는 밀접하게 연관된 작업을 수행하기 위해 한 개 이상의 데이터 조작 명령어(DML)로 이루어진다

TCL(Transaction COntrol Language): 트랜잭션을을 제어하기 위해 사용하는 명령어

트랜잭션을 취소하고 싶을 때 사용하는 명령어
-ROLLBACK
ROLLBACK을 실행하면 현재 트랜잭션이 시작된 시점 까지 작업 취소 즉 ROLLBACK 직전에 실행한
INSERT, UPDATE, DELETE문은 실행 취소된다

트랜잭션을 영원히 반영하고 싶을 때 사용하는 명령어
-COMMIT
COMMIT이 사용되면 현재 트랜잭션 시작 이후 실행된 INSERT, UPDATE, DELETE 수행 결과를 데이터베이스에 영구히 반영한다

세션: 데이터베이스 접속을 시작으로 여러 데이터베이스에서 관련 작업을 수행한후 접속을 종료하기까지 전체 기간

수정 중인 데이터 접근을 막는 LOCK
-------------------------------------------------------------------------------------------------------
8월13일
oracle책 p324 문제
1. create table emp_hw(empno number(4), 
                    ename varchar2(10),
                    job varchar2(9),
                    mgr number(4),
                    hiredate date,
                    sal number(7,2),
                    comm number(7,2),
                    deptno number(2))

2. alter table emp_hw
    add bigo varchar2(20)

3. alter table emp_hw
    modify bigo varchar2(30)

4. alter table emp_hw
    rename column bigo to remark

5. insert into emp_hw
    select empno, ename, job, mgr, hiredate, sal, comm, deptno, null
    from emp

6. drop table emp_hw

객체를 생성, 변경, 삭제하는 데이터 정의어
-데이터 정의어(DDL): 데이터베이스 데이터를 보관하고 관리하기 위해 제공되는 여러 객체의 생성,변경,삭제 관련 기능을 수행
사용할 때 유의점
데이터 조작어(DML)와 달리 명령어를 수행하자마자 데이터베이스에 수행한 내용이 바로 반영되는 특성이 있다

테이블을 생성하는 명령어(p312 참고)
-CREATE

테이블을 변경하는 명령어(p317 참고)
-ALTER

테이블에 열을 추가하는 키워드
-ADD

열 이름을 변경하는 키워드
-RENAME

열의 자료형을 변경하는 키워드
-MODIFY

특정 열을 삭제할 때 사용하는 키워드
-DROP COLUMN

테이블 이름 변경
-RENAME 테이블이름 TO 변경할 테이블이름

테이블의 데이터를 삭제하는 명령어
-TRUNCATE: 특정 테이블의 모든 데이터를 삭제한다
데이터 정의어이기 때문에 ROLLBACK이 되지 않는다는 점에서 DELETE문과 다르다 삭제이후 복구할 수 없다

테이블을 삭제하는 명령어
-DROP

데이터베이스를 위한 데이터를 저장(p327 참고)
-데이터 사전: 데이터베이스를 구성하고 운영하는 데 필요한 모든 정보를 저장

더 빠른 검색을 위한 인덱스(p334 참고)
-인덱스: 오라클 데이터베이스에서 데이터 검색 성능의 향상을 위해 테이블 열에 사용하는 객체

인덱스 생성
CREATE INDEX 인덱스이름
	ON 테이블이름(열 이름1 ASC or DESC,
		       열 이름2 ASC or DESC,
		        ...			)

인덱스 삭제
DROP INDEX 인덱스 이름

테이블처럼 사용하는 뷰(p338 참고)
뷰(View): 하나 이상의 테이블을 조회하는 SELECT문을 저장한 객체

뷰의 목적
물리적 데이터를 저장하지 않고 SELECT문만 저장함으로써 테이블의 데이터를 열람하는 것이 목적
편리성: SELECT문의 복잡도를 완화하기 위해
보안성: 테이블의 특정 열을 노출하고 싶지 않을 경우


뷰 생성(p341 표 참고)
CREATE [OR REPLACE] [FORCE | NOFORCE] VIEW 뷰 이름 (열 이름1, 열 이름2, ...)
	AS (저장할SELECT문)
[WITH CHECK OPTION [CONSTRAINT 제약 조건]]
[WITH READ ONLY [CONSTRAINT 제약 조건]]

인라인 뷰를 사용한 TOP-N SQL문(p344 참고)
-ROWNUM

규칙에 따라 순번을 생성하는 시퀀스(p348 참고)
-시퀀스(sequence): 오라클 데이터베이스에서 특정 규칙에 맞는 연속 숫자를 생성하는 객체

시퀀스 생성(p349 표 참고)
CREATE SEQUENCE 시퀀스 이름 
[INCREMENT BY n]
[START WITH n]
[MAXVALUE n | NOMAXVALUE]
[MINVALUE n | NOMINVALUE]
[CYCLE | NOCYCLE]
[CACHE n | NOCACHE]
-----------------------------------------------------------------------------------------------------------------
8월14일
oracle 책(p357) 문제
1-1. create table empidx 
    as select * from emp;

1-2. create index idx_empidx_empno
    on empidx(empno);

1-3. select *
    from user_indexes
    where index_name = 'IDX_EMPIDX_EMPNO';

2. create or replace view empidx_over15k
    as (select empno, ename, job, deptno,
               sal, nvl2(commm, 'O', 'X') as comm
            from empidx
            where sal > 1500);

3-1. create table deptseq
    	as select *
    	from dept;

3-2. create sequence seq_deptseq
    	increment by 1
    	start with 1
    	maxvalue 99
    	minvalue 1
    	nocycle nocache

3-3. insert into deptseq (deptno, dname, loc)
       values (seq_deptseq.nextval, 'DATABASE', 'SEOUL');

       insert into deptseq (deptno, dname, loc)
       values (seq_deptseq.nextval, 'WEB', 'BUSAN');

       insert into deptseq (deptno, dname, loc)
       values (seq_deptseq.nextval, 'MOBILE', 'ILSAN');

시퀀스 수정
ALTER SEQUENCE 시퀀스 이름
[INCREMENT BY n]
[START WITH n]
[MAXVALUE n | NOMAXVALUE]
[MINVALUE n | NOMINVALUE]
[CYCLE | NOCYCLE]
[CACHE n | NOCACHE]

동의어(synonym): 테이블, 뷰, 시퀀스 등 객체 이름 대신 사용할 수 있는 다른 이름을 부여하는 객체

제약 조건: 오라클에서 사용하는 제약 조건은 테이블의 특정 열에 지정한다 제약 조건을 지정한 열에 제약 조건에
부합하지 않는 데이터를 저장할 수 없다 제약 조건 지정 방식에 따라 기존 데이터의 수정이나 삭제 가능 여부도 영향을 받는다
(p360 표 참고)

빈값을 허락하지 않는 제약 조건(p362 참고)
-NOT NULL: 특정 열에 데이터의 중복 여부와는 상관없이 NULL의 저장을 허용하지 않는 제약 조건

제약 조건 확인(p364 표 참고)

제약 조건 이름 직접 지정(p365 참고)
-CONSTRAINT 제약 조건 이름

이미 생성한 테이블에 제약 조건 지정(p366 참고)
-MODIFY

생성한 제약 조건의 이름 변경하기(p368 참고)
-RENAME CONSTRAINT 바꾸기 전 제약 조건이름 TO 바꿀 제약 조건이름

제약 조건 삭제(p369 참고)
-DROP CONSTRAINT

중복되지 않는 값(p370 참고)
-UNIQUE: 열에 저장할 데이터의 중복을 허용하지 않고자 할 때 사용

유일하게 하나만 있는 값(p377 참고)
-PRIMARY KEY: UNIQUE와 NOT NULL제약 조건의 특성을 모두 가지는 제약 조건이다
즉 데이터 중복을 허용하지 않고 NULL도 허용하지 않는다

다른 테이블과 관계를 맺는 제약 조건(p382 참고)
-FOREIGN KEY: 서로 다른 테이블 간 관계를 정의하는 데 사용 하는 제약 조건이다
특정 테이블에서 PRIMARY KEY 제약 조건을 지정한 열을 다른 테이블의 특정 열에서 참조하겠다는 의미로 지정할 수 있다

FOREIGN KEY 지정하기
1. CREATE TABLE 테이블 이름(
           ...(다른 열 정의),
          열 자료형 CONSTRAINT [제약 조건 이름] REFERENCES 참조 테이블(참조할 열)
    );

2. CREATE TABLE 테이블 이름(
           ...(다른 열 정의),
          열 자료형 REFERENCES 참조 테이블(참조할 열)
    );

3. CREATE TABLE 테이블 이름(
           ...(다른 열 정의),
           CONSTRAINT [제약 조건 이름] FOREIGN KEY(열)
           REFERENCES 참조 테이블(참조할 열)
    );

FOREIGN KEY로 참조 행 데이터 삭제하기(p387 표 참고)

제약 조건 비활성화, 활성화(p393 참고)

-비활성화: ALTER TABLE 테이블 이름
	DISABLE [NOVALIDATE / VALIDATE(선택)] CONSTRAINT 제약조건이름

-활성화: ALTER TABLE 테이블 이름
             ENABLE [NOVALIDATE / VALIDATE(선택)] CONSTRAINT 제약조건이름
-----------------------------------------------------------------------------------------------------------------
8월 19일
oracle책 p394 문제
1. create table dept_const(
    deptno number(2) constraint DEPTCONST_DEPTNO_PK primary key,
    dname varchar2(14) constraint DEPTCONST_DNAME_UNQ unique,
    loc varchar2(13) constraint DEPTCONST_LOC_NN not null)

2. create table emp_const(
    empno number(4) constraint EMPCONST_EMPNO_PK primary key,
    ename varchar2(10) constraint EMPCONST_ENAME_NN not null,
    job varchar2(9),
    tel varchar2(20) constraint EMPCONST_TEL_UNQ unique,
    hiredate date,
    sal number(7,2) constraint EMPNOCONST_SAL_CHK check (sal between 1000 and 9999),
    comm number(7,2),
    deptno number(2) constraint EMPNOCONST_DEPTNO_FK references dept_const (deptno)) 

3.  select table_name, constraint_name, constraint_type
    from user_constraints
    where table_name in ('EMP_CONST', 'DEPT_CONST')
    order by constraint_name

데이터 형태와 범위를 정하는 제약조건(p390 참고)
-CHECK: 열에 저장할 수 있는 값의 범위 또는 패턴을 정의할 때 사용한다

기본값을 정하는 제약조건(p392 참고)
-DEFAULT: 특정 열에 저장할 값이 지정되지 않았을 경우에 기본값을 지정할 수 있는데 이때 사용

사용자 관리(p396 참고)

데이터베이스 스키마: 데이터베이스에서 데이터 간 관계, 데이터 구조, 제약 조건 등 데이터를 저장 및 관리하기 위해 정의한
데이터베이스 구조의 범위를 스키마(schema)를 통해 그룹 단위로 분류한다
오라클 데이터베이스에서는 스키마와 사용자를 구별하지 않고 사용하기도 한다
사용자: 데이터를 사용 및 관리하기 위해 오라클 데이터베이스에 접속하는 개체
스키마: 오라클 데이터베이스에 접속한 사용자와 연결된 객체

사용자 생성
create user 사용자이름(필수)
identified by 패스워드(필수)

권한 관리(p402 참고)
-시스템 권한: 사용자 생성과 정보 수정 및 삭제, 데이터베이스 접근, 오라클 데이터베이스의 여러 자원과 객체 생성 및 관리 등의
권한을 포함 데이터베이스 관리 권한이 있는 사용자가 부여할 수 있는 권한

시스템 권한 부여
GRANT [시스템 권한] TO [사용자 이름/롤(Role)이름/PUBLIC]
[WITH ADMIN OPTION]

시스템 권한 취소
REVOKE [시스템 권한] FROM [사용자 이름/롤(Role)이름/PUBLIC]

-객체권한: 특정 사용자가 생성한 테이블, 인덱스, 뷰, 시퀀스 등과 관련된 권한

객체 권한 부여
GRANT [객체 권한/ALL PRIVILEGES]
       ON [스키마.객체 이름]
       TO [사용자 이름/롤(Role)이름/PUBLIC]
       [WITH ADMIN OPTION]

객체 권한 취소
REVOKE 객체 권한/ALL PRIVILEGES](필수)
       ON [스키마.객체 이름](필수)
       FROM [사용자 이름/롤(Role)이름/PUBLIC](필수)
       [CASCADE CONSTRAINTS/FORCE](선택)

롤 관리(p412 참고)

PL/SQL 구조(p419 참고)
DECLARE
	[실행에 필요한 여러 요소 선언];
BEGIN	
	[작업을 위해 실제 실행하는 명령어];
EXCEPTION
	[PL/SQL수행 도중 발생하는 오류 처리];
END;

SET SERVEROUTPUT ON; --실행 결과를 화면에 출력

변수와 상수(p423 참고)
-변수 선언
변수 이름 자료형 := 값 또는 값이 도출되는 여러 표현식;

-상수 정의
변수 이름 CONSTANT 자료형 := 값 또는 값을 도출하는 여러 표현식;

-변수의 기본값 지정
변수 이름 자료형 DEFAULT := 값 또는 값을 도출하는 여러 표현식;

-변수에 NULL 값 저장 막기
변수 이름 자료형 NOT NULL := 또는 DEFAULT 값 또는 값을 도출하는 여러 표현식;

변수의 자료형(p427 참고)
스칼라형: 숫자, 문자열, 날짜 등과 같이 오라클에서 기본으로 정의해 놓은 자료형으로 내부 구성 요소가 없는 단일 값

참조형:변수 이름 테이블이름.열이름%TYPE;

복합형,LOB형

조건 제어문(p431 참고)
CASE 조건문(p435 참고)
반복 제어문(p438 참고)

자료형이 다른 여러 데이터를 저장하는 레코드(p446 참고)
-레코드: 자료형이 각기 다른 데이터를 하나의 변수에 저장하는 데 사용한다
TYPE 레코드 이름 IS RECORD(
변수 이름 자료형 NOT NULL := (또는 DEFAULT)값 또는 값이 도출되는 여러 표현식

특정 열을 선택하여 처리하는 커서
-커서: SELECT문 또는 데이터 조작어 같은 SQL문을 실행했을 때 해당 SQL문을 처리하는 정보를 저장한 메모리 공간
-----------------------------------------------------------------------------------------------------------------
8월 20일
SQL문의 실행순서
FROM-WHERE-GROUP BY-HAVING-SELECT-ORDER BY

서브 쿼리 중 FROM절에 작성되는 서브쿼리 : 인라인 뷰

오라클 함수는 내장함수, 사용자 정의 함수로 분류할 수 있다(p495 참고)

함수 생성
CREATE [OR REPLACE] FUNCTION 함수 이름
[(파라미터 이름1 [IN] 자료형1,
  파라미터 이름2 [IN] 자료형2,
  ...
  파라미터 이름N [IN] 자료형N,
)]
RETURN 자료형
IS | AS
   선언부
BEGIN
   실행부
   RETURN (반환값);
 EXCEPTION
   예외 처리부
END [함수 이름];

함수 삭제하기
DROP FUNCTION 함수 이름

-트리거: 데이터베이스 안의 특정 상황이나 동작, 즉 이벤트가 발생할 경우에 자동으로 실행되는 기능을 정의하는 PL/SQL 서브 프로그램

DML 트리거 형식
CREATE [OR REPLACE] TRIGGER 트리거 이름
BEFORE | AFTER
INSERT | UPDATE | DELETE ON 테이블 이름
REFERENCING OLD AS old | NEW as new
FOR EACH ROW WHEN 조건식
FOLLOWS 트리거 이름2, 트리거 이름3 ...
ENABLE | DISABLE

DECLARE
     선언부
BEGIN
     실행부
EXCEPTION
     예외 처리부
END;
